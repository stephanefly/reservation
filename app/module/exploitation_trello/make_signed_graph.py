import pandas as pd
from django.db.models import Q
from app.models import Event
from app.module.exploitation_trello.lib_graph_all import tracage_figure_bar_bokeh
import datetime

from app.module.exploitation_trello.mise_en_week import new_mise_en_week


def get_ok_data():
    pd.set_option('display.max_columns', None)
    results = Event.objects.filter(
        Q(status__icontains="Presta FINI")|Q(status__icontains="Acompte OK")).filter(signer_at__isnull=False
    ).select_related(
        'client_id',  # Suppose un ForeignKey vers AppClient
        'event_product_id',  # Suppose un ForeignKey vers AppEventProduct
        'event_details_id'  # Suppose un ForeignKey vers AppEventDetails
    ).values(
        'client_id__nom',  # Accéder au champ `nom` de la relation client
        'prix_proposed',
        'event_details_id__date_evenement',  # Accéder à date_evenement à travers la relation
        'event_product_id__photobooth',  # Accéder à photobooth à travers la relation
        'event_product_id__miroirbooth',  # Accéder à miroirbooth à travers la relation
        'event_product_id__videobooth'  # Accéder à videobooth à travers la relation
    )

    df = pd.DataFrame(results)
    df['event_product_id__photobooth'] = df['event_product_id__photobooth'].astype(int)
    df['event_product_id__miroirbooth'] = df['event_product_id__miroirbooth'].astype(int)
    df['event_product_id__videobooth'] = df['event_product_id__videobooth'].astype(int)

    df = df.rename(columns={
        'client_id__nom': 'Names',
        'prix_proposed': 'Prix',
        'event_details_id__date_evenement': 'Date-Event',
        'event_product_id__photobooth': 'Photobooth',
        'event_product_id__miroirbooth': 'Miroirbooth',
        'event_product_id__videobooth' : '360Booth',
    })

    date_now = datetime.datetime.today().strftime('%Y-%m-%d')
    df_all_week = new_mise_en_week(df)
    tracage_figure_bar_bokeh(df_all_week, date_now)